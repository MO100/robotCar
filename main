import time
from time import sleep
import math
import threading
from collections import deque
import matplotlib.pyplot as plt
from matplotlib import animation

import robot_module as robot

# === Initialize Sensors ===
robot.MPU_Init()
robot.calibrate_mpu()
ads = robot.ADS7830()

# === Plot Setup ===
fig = plt.figure(figsize=(12, 6))

# Subplot 1: Distance vs Time
ax1 = fig.add_subplot(1, 2, 1)
time_buffer = deque(maxlen=100)
distance_buffer = deque(maxlen=100)
line, = ax1.plot([], [], 'b-')
ax1.set_title("Ultrasonic Distance (Live)")
ax1.set_xlabel("Time (s)")
ax1.set_ylabel("Distance (cm)")
ax1.set_ylim(0, 100)
ax1.grid(True)

# Subplot 2: Room Map
ax2 = fig.add_subplot(1, 2, 2)
ax2.set_title("Room Map (Live)")
ax2.set_xlim(-200, 200)
ax2.set_ylim(-200, 200)
ax2.set_aspect('equal')
ax2.grid(True)

# === Robot Position Tracking ===
robot_x, robot_y = 0, 0
robot_theta = 0  # Angle in degrees (0 = facing right)
robot_trail = deque(maxlen=100)

# === Shared Variables ===
distance = 0
running = True
start_time = time.time()


def tic():
    return time.perf_counter()


def toc(start):
    end = time.perf_counter()
    return end - start


# === Plot Update Function ===
def update_plots(frame):
    current_time = time.time() - start_time
    time_buffer.append(current_time)
    distance_buffer.append(distance)
    line.set_data(time_buffer, distance_buffer)
    ax1.set_xlim(max(0, current_time - 5), current_time)

    # Update map plot
    ax2.clear()
    ax2.set_title("Room Map (Live)")
    ax2.set_xlim(-200, 200)
    ax2.set_ylim(-200, 200)
    ax2.grid(True)

    # Trail
    robot_trail.append((robot_x, robot_y))
    if len(robot_trail) > 1:
        trail_x, trail_y = zip(*robot_trail)
        ax2.plot(trail_x, trail_y, 'g-', alpha=0.5)

    # Robot heading arrow
    arrow_length = 20
    end_x = robot_x + arrow_length * math.cos(math.radians(robot_theta))
    end_y = robot_y + arrow_length * math.sin(math.radians(robot_theta))
    ax2.arrow(robot_x, robot_y, end_x - robot_x, end_y - robot_y,
              head_width=10, head_length=15, fc='r', ec='r')

    # Obstacle dot
    if distance < 100:
        obs_x = robot_x + distance * math.cos(math.radians(robot_theta))
        obs_y = robot_y + distance * math.sin(math.radians(robot_theta))
        ax2.plot(obs_x, obs_y, 'ro')


# === Sensor Loop ===
def sensor_loop():
    global robot_x, robot_y, robot_theta, distance, running

    start = tic()
    try:
        while running:
            # Read sensors
            distance = robot.get_distance()
            G_z = robot.read_raw_data(robot.GYRO_ZOUT_H) / 16.4
            dt = toc(start)
            start = tic()
            robot_theta += G_z * dt
            robot_theta %= 360  # Keep angle in [0, 360)

            adc0 = ads.read_adc(0)
            adc1 = ads.read_adc(1)
            
            '''

            if adc0 < 10 and adc1 < 10:
                robot.stop()
            elif adc0 > 240:
                robot.forward()
                robot_x += 5 * math.cos(math.radians(robot_theta))
                robot_y += 5 * math.sin(math.radians(robot_theta))
            elif adc0 < 20:
                robot.backward()
            elif adc1 > 240:
                robot.left()
            elif adc1 < 20:
                robot.right()
            else:
                robot.stop()

            # === Mode 2: Autonomous obstacle avoidance ===
                '''
                
            robot.forward()

            if distance < 20:
                robot.stop()
                sleep(2)
                robot.right()
                sleep(0.4)
                robot.stop()
                sleep(1)
                if robot.get_distance() < 20:
                    robot.left()
                    sleep(0.8)
                    robot.stop()
                    if robot.get_distance() < 20:
                        robot.stop()
                        print("No path available")
                        exit()

            robot.forward()
            
            sleep(0.1)

    except KeyboardInterrupt:
        print("Sensor loop interrupted.")
        running = False
        robot.stop()
        robot.cleanup()


# === Start Thread & Animation ===
sensor_thread = threading.Thread(target=sensor_loop)
sensor_thread.start()

ani = animation.FuncAnimation(fig, update_plots, interval=100)

# === Show Plot ===
try:
    plt.tight_layout()
    plt.show()
except KeyboardInterrupt:
    print("Visualization interrupted.")
finally:
    print("Program running. Press Ctrl+C to exit.")
    while running:
        sleep(1)
    sensor_thread.join()
    plt.close()
    print("Program exited cleanly.")

